{"version":3,"file":"candidate.js","sourceRoot":"","sources":["../../../lib/twilio/rtc/candidate.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAyBH;;;GAGG;AACH;IAiDE;;;OAGG;IACH,8BAAY,YAA6B;QA9CzC;;WAEG;QACK,YAAO,GAAY,KAAK,CAAC;QAOjC;;WAEG;QACK,aAAQ,GAAY,KAAK,CAAC;QAkChC,IAAI,IAAI,CAAC;QACT,IAAM,KAAK,GAAG,YAAY,CAAC,SAAS,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAE5D,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;YACZ,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;SAC/B;QAED,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,IAAI,CAAC;QACvC,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC,EAAE,IAAI,YAAY,CAAC,OAAO,CAAC;QAClD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;QACtC,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;QACtC,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC,MAAM,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,wCAAS,GAAT;QACE,OAAO;YACL,gBAAgB,EAAE,IAAI,CAAC,aAAa;YACpC,SAAS,EAAE,IAAI,CAAC,OAAO;YACvB,IAAI,EAAE,IAAI,CAAC,EAAE;YACb,WAAW,EAAE,IAAI,CAAC,QAAQ;YAC1B,cAAc,EAAE,IAAI,CAAC,WAAW;YAChC,MAAM,EAAE,IAAI,CAAC,IAAI;YACjB,UAAU,EAAE,IAAI,CAAC,QAAQ;YACzB,UAAU,EAAE,IAAI,CAAC,QAAQ;YACzB,cAAc,EAAE,IAAI,CAAC,WAAW;SACjC,CAAC;IACJ,CAAC;IACH,2BAAC;AAAD,CAAC,AAtFD,IAsFC;AAtFY,oDAAoB","sourcesContent":["/**\n * @module Voice\n * @internalapi\n */\n\n/**\n * Payload object we send to insights\n * @private\n */\ninterface RTCIceCandidatePayload {\n  candidate_type: string;\n  deleted: boolean;\n  ip: string;\n  is_remote: boolean;\n  'network-cost': number | undefined;\n  port: number;\n  priority: number;\n  protocol: string;\n  transport_id: string;\n}\n\n/**\n * Represents an ICE candidate coming from the browser\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate\n * @private\n */\nexport type RTCIceCandidate = any;\n\n/**\n * {@link RTCIceCandidate} parses an ICE candidate gathered by the browser\n * and returns a RTCLocalIceCandidate object\n */\nexport class RTCLocalIceCandidate {\n  /**\n   * Candidate's type\n   * https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateType\n   */\n  private candidateType: string;\n\n  /**\n   * Whether this is deleted from the list of candidate gathered\n   */\n  private deleted: boolean = false;\n\n  /**\n   * Candidate's IP address\n   */\n  private ip: string;\n\n  /**\n   * Whether this is a remote candidate\n   */\n  private isRemote: boolean = false;\n\n  /**\n   * A number from 0 to 999 indicating the cost of network\n   * where larger values indicate a stronger preference for not using that network\n   */\n  private networkCost: number | undefined;\n\n  /**\n   * Candidate's port number\n   */\n  private port: number;\n\n  /**\n   * A number indicating candidate's priority\n   */\n  private priority: number;\n\n  /**\n   * Candidate's protocol - udp or tcp\n   */\n  private protocol: string;\n\n  /**\n   * Also known as sdpMid, specifying the candidate's media stream identification tag which uniquely\n   * identifies the media stream within the component with which the candidate is associated\n   */\n  private transportId: string;\n\n  /**\n   * @constructor\n   * @param iceCandidate RTCIceCandidate coming from the browser\n   */\n  constructor(iceCandidate: RTCIceCandidate) {\n    let cost;\n    const parts = iceCandidate.candidate.split('network-cost ');\n\n    if (parts[1]) {\n      cost = parseInt(parts[1], 10);\n    }\n\n    this.candidateType = iceCandidate.type;\n    this.ip = iceCandidate.ip || iceCandidate.address;\n    this.networkCost = cost;\n    this.port = iceCandidate.port;\n    this.priority = iceCandidate.priority;\n    this.protocol = iceCandidate.protocol;\n    this.transportId = iceCandidate.sdpMid;\n  }\n\n  /**\n   * Get the payload object for insights\n   */\n  toPayload(): RTCIceCandidatePayload {\n    return {\n      'candidate_type': this.candidateType,\n      'deleted': this.deleted,\n      'ip': this.ip,\n      'is_remote': this.isRemote,\n      'network-cost': this.networkCost,\n      'port': this.port,\n      'priority': this.priority,\n      'protocol': this.protocol,\n      'transport_id': this.transportId,\n    };\n  }\n}\n"]}